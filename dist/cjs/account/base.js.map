{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/account/base.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  getContract,\n  type Chain,\n  type GetContractReturnType,\n  type Hash,\n  type Hex,\n  type HttpTransport,\n  type PublicClient,\n  type Transport,\n} from \"viem\";\nimport { EntryPointAbi } from \"../abis/EntryPointAbi.js\";\nimport { createPublicErc4337Client } from \"../client/create-client.js\";\nimport type {\n  PublicErc4337Client,\n  SupportedTransports,\n} from \"../client/types.js\";\nimport { Logger } from \"../logger.js\";\nimport type { SmartAccountSigner } from \"../signer/types.js\";\nimport { wrapSignatureWith6492 } from \"../signer/utils.js\";\nimport type { BatchUserOperationCallData } from \"../types.js\";\nimport { getDefaultEntryPointAddress } from \"../utils/defaults.js\";\nimport { createBaseSmartAccountParamsSchema } from \"./schema.js\";\nimport type {\n  BaseSmartAccountParams,\n  ISmartContractAccount,\n  SignTypedDataParams,\n} from \"./types.js\";\n\nexport enum DeploymentState {\n  UNDEFINED = \"0x0\",\n  NOT_DEPLOYED = \"0x1\",\n  DEPLOYED = \"0x2\",\n}\n\nexport abstract class BaseSmartContractAccount<\n  TTransport extends SupportedTransports = Transport\n> implements ISmartContractAccount\n{\n  protected factoryAddress: Address;\n  protected deploymentState: DeploymentState = DeploymentState.UNDEFINED;\n  public accountAddress?: Address;\n  protected accountInitCode?: Hex;\n  protected owner: SmartAccountSigner | undefined;\n  protected entryPoint: GetContractReturnType<\n    typeof EntryPointAbi,\n    PublicClient,\n    Chain\n  >;\n  protected entryPointAddress: Address;\n  protected rpcProvider:\n    | PublicErc4337Client<TTransport>\n    | PublicErc4337Client<HttpTransport>;\n\n  constructor(params_: BaseSmartAccountParams<TTransport>) {\n    const params =\n      createBaseSmartAccountParamsSchema<TTransport>().parse(params_);\n\n    this.entryPointAddress =\n      params.entryPointAddress ?? getDefaultEntryPointAddress(params.chain);\n\n    const rpcUrl =\n      typeof params.rpcClient === \"string\"\n        ? params.rpcClient\n        : params.rpcClient.transport.type === \"http\"\n        ? (\n            params.rpcClient.transport as ReturnType<HttpTransport>[\"config\"] &\n              ReturnType<HttpTransport>[\"value\"]\n          ).url || params.chain.rpcUrls.default.http[0]\n        : undefined;\n\n    const fetchOptions =\n      typeof params.rpcClient === \"string\"\n        ? undefined\n        : params.rpcClient.transport.type === \"http\"\n        ? (\n            params.rpcClient.transport as ReturnType<HttpTransport>[\"config\"] &\n              ReturnType<HttpTransport>[\"value\"]\n          ).fetchOptions\n        : undefined;\n\n    this.rpcProvider = rpcUrl\n      ? createPublicErc4337Client({\n          chain: params.chain,\n          rpcUrl,\n          fetchOptions: {\n            ...fetchOptions,\n            headers: {\n              ...fetchOptions?.headers,\n              \"Alchemy-Aa-Sdk-Signer\": params.owner?.signerType || \"unknown\",\n              \"Alchemy-Aa-Sdk-Factory-Address\": params.factoryAddress,\n            },\n          },\n        })\n      : (params.rpcClient as PublicErc4337Client<TTransport>);\n\n    this.accountAddress = params.accountAddress;\n    this.factoryAddress = params.factoryAddress;\n    this.owner = params.owner;\n    this.accountInitCode = params.initCode;\n\n    this.entryPoint = getContract({\n      address: this.entryPointAddress,\n      abi: EntryPointAbi,\n      // Need to cast this as PublicClient or else it breaks ABI typing.\n      // This is valid because our PublicClient is a subclass of PublicClient\n      publicClient: this.rpcProvider as PublicClient,\n    });\n  }\n\n  // #region abstract-methods\n\n  /**\n   * This method should return a signature that will not `revert` during validation.\n   * It does not have to pass validation, just not cause the contract to revert.\n   * This is required for gas estimation so that the gas estimate are accurate.\n   *\n   */\n  abstract getDummySignature(): Hash;\n\n  /**\n   * this method should return the abi encoded function data for a call to your contract's `execute` method\n   *\n   * @param target -- equivalent to `to` in a normal transaction\n   * @param value -- equivalent to `value` in a normal transaction\n   * @param data -- equivalent to `data` in a normal transaction\n   * @returns abi encoded function data for a call to your contract's `execute` method\n   */\n  abstract encodeExecute(\n    target: string,\n    value: bigint,\n    data: string\n  ): Promise<Hash>;\n\n  /**\n   * this should return an ERC-191 compliant message and is used to sign UO Hashes\n   *\n   * @param msg -- the message to sign\n   */\n  abstract signMessage(msg: string | Uint8Array): Promise<Hash>;\n\n  /**\n   * this should return the init code that will be used to create an account if one does not exist.\n   * This is the concatenation of the account's factory address and the abi encoded function data of the account factory's `createAccount` method.\n   * https://github.com/eth-infinitism/account-abstraction/blob/abff2aca61a8f0934e533d0d352978055fddbd96/contracts/core/SenderCreator.sol#L12\n   */\n  protected abstract getAccountInitCode(): Promise<Hash>;\n\n  // #endregion abstract-methods\n\n  // #region optional-methods\n\n  /**\n   * If your account handles 1271 signatures of personal_sign differently\n   * than it does UserOperations, you can implement two different approaches to signing\n   *\n   * @param uoHash -- The hash of the UserOperation to sign\n   * @returns the signature of the UserOperation\n   */\n  async signUserOperationHash(uoHash: Hash): Promise<Hash> {\n    return this.signMessage(uoHash);\n  }\n\n  /**\n   * If your contract supports signing and verifying typed data,\n   * you should implement this method.\n   *\n   * @param _params -- Typed Data params to sign\n   */\n  async signTypedData(_params: SignTypedDataParams): Promise<`0x${string}`> {\n    throw new Error(\"signTypedData not supported\");\n  }\n\n  /**\n   * This method should wrap the result of `signMessage` as per\n   * [EIP-6492](https://eips.ethereum.org/EIPS/eip-6492)\n   *\n   * @param msg -- the message to sign\n   */\n  async signMessageWith6492(msg: string | Uint8Array): Promise<`0x${string}`> {\n    const [isDeployed, signature] = await Promise.all([\n      this.isAccountDeployed(),\n      this.signMessage(msg),\n    ]);\n\n    return this.create6492Signature(isDeployed, signature);\n  }\n\n  /**\n   * Similar to the signMessageWith6492 method above,\n   * this method should wrap the result of `signTypedData` as per\n   * [EIP-6492](https://eips.ethereum.org/EIPS/eip-6492)\n   *\n   * @param params -- Typed Data params to sign\n   */\n  async signTypedDataWith6492(\n    params: SignTypedDataParams\n  ): Promise<`0x${string}`> {\n    const [isDeployed, signature] = await Promise.all([\n      this.isAccountDeployed(),\n      this.signTypedData(params),\n    ]);\n\n    return this.create6492Signature(isDeployed, signature);\n  }\n\n  /**\n   * Not all contracts support batch execution.\n   * If your contract does, this method should encode a list of\n   * transactions into the call data that will be passed to your\n   * contract's batch execution method.\n   *\n   * @param _txs -- the transactions to batch execute\n   */\n  async encodeBatchExecute(\n    _txs: BatchUserOperationCallData\n  ): Promise<`0x${string}`> {\n    throw new Error(\"encodeBatchExecute not supported\");\n  }\n  // #endregion optional-methods\n\n  // Extra implementations\n  async getNonce(): Promise<bigint> {\n    if (!(await this.isAccountDeployed())) {\n      return 0n;\n    }\n    const address = await this.getAddress();\n    return this.entryPoint.read.getNonce([address, BigInt(0)]);\n  }\n\n  async getInitCode(): Promise<Hex> {\n    if (this.deploymentState === DeploymentState.DEPLOYED) {\n      return \"0x\";\n    }\n\n    const contractCode = await this.rpcProvider.getBytecode({\n      address: await this.getAddress(),\n    });\n\n    if ((contractCode?.length ?? 0) > 2) {\n      this.deploymentState = DeploymentState.DEPLOYED;\n      return \"0x\";\n    } else {\n      this.deploymentState = DeploymentState.NOT_DEPLOYED;\n    }\n\n    return this._getAccountInitCode();\n  }\n\n  async getAddress(): Promise<Address> {\n    if (!this.accountAddress) {\n      const initCode = await this._getAccountInitCode();\n      Logger.verbose(\n        \"[BaseSmartContractAccount](getAddress) initCode: \",\n        initCode\n      );\n      try {\n        await this.entryPoint.simulate.getSenderAddress([initCode]);\n      } catch (err: any) {\n        if (err.cause?.data?.errorName === \"SenderAddressResult\") {\n          this.accountAddress = err.cause.data.args[0] as Address;\n          Logger.verbose(\n            \"[BaseSmartContractAccount](getAddress) entrypoint.getSenderAddress result:\",\n            this.accountAddress\n          );\n          return this.accountAddress;\n        }\n      }\n\n      throw new Error(\"getCounterFactualAddress failed\");\n    }\n\n    return this.accountAddress;\n  }\n\n  async setAddress(addr:Address) {\n    this.accountAddress = addr;\n  }\n\n  getOwner(): SmartAccountSigner | undefined {\n    return this.owner;\n  }\n\n  getFactoryAddress(): Address {\n    return this.factoryAddress;\n  }\n\n  getEntryPointAddress(): Address {\n    return this.entryPointAddress;\n  }\n\n  async isAccountDeployed(): Promise<boolean> {\n    return (await this.getDeploymentState()) === DeploymentState.DEPLOYED;\n  }\n\n  async getDeploymentState(): Promise<DeploymentState> {\n    if (this.deploymentState === DeploymentState.UNDEFINED) {\n      const initCode = await this.getInitCode();\n      return initCode === \"0x\"\n        ? DeploymentState.DEPLOYED\n        : DeploymentState.NOT_DEPLOYED;\n    } else {\n      return this.deploymentState;\n    }\n  }\n\n  /**\n   * https://eips.ethereum.org/EIPS/eip-4337#first-time-account-creation\n   * The initCode field (if non-zero length) is parsed as a 20-byte address,\n   * followed by calldata to pass to this address.\n   * The factory address is the first 40 char after the 0x, and the callData is the rest.\n   */\n  protected async parseFactoryAddressFromAccountInitCode(): Promise<\n    [Address, Hex]\n  > {\n    const initCode = await this._getAccountInitCode();\n    const factoryAddress = `0x${initCode.substring(2, 42)}` as Address;\n    const factoryCalldata = `0x${initCode.substring(42)}` as Hex;\n    return [factoryAddress, factoryCalldata];\n  }\n\n  private async _getAccountInitCode(): Promise<Hash> {\n    return this.accountInitCode ?? this.getAccountInitCode();\n  }\n\n  private async create6492Signature(\n    isDeployed: boolean,\n    signature: Hash\n  ): Promise<Hash> {\n    if (isDeployed) {\n      return signature;\n    }\n\n    const [factoryAddress, factoryCalldata] =\n      await this.parseFactoryAddressFromAccountInitCode();\n\n    Logger.verbose(\n      `[BaseSmartContractAccount](create6492Signature)\\\n        factoryAddress: ${factoryAddress}, factoryCalldata: ${factoryCalldata}`\n    );\n\n    return wrapSignatureWith6492({\n      factoryAddress,\n      factoryCalldata,\n      signature,\n    });\n  }\n}\n"]}