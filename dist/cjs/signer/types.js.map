{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/signer/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Address } from \"abitype\";\nimport type { Hex } from \"viem\";\nimport type { SignTypedDataParams } from \"../account/types.js\";\n\n/**\n * Extends the @interface SmartAccountSigner interface with authentication.\n *\n * @template AuthParams - the generic type of the authentication parameters\n * @template AuthDetails - the generic type of the authentication details\n * @template Inner - the generic type of the inner client that the signer wraps to provide functionality such as signing, etc.\n *\n * @method authenticate - authenticate the signer\n * @method getAuthDetails - get the authentication details\n */\nexport interface SmartAccountAuthenticator<AuthParams, AuthDetails, Inner = any>\n  extends SmartAccountSigner<Inner> {\n  authenticate: (params: AuthParams) => Promise<AuthDetails>;\n\n  getAuthDetails: () => Promise<AuthDetails>;\n}\n\n/**\n * A signer that can sign messages and typed data.\n *\n * @template Inner - the generic type of the inner client that the signer wraps to provide functionality such as signing, etc.\n *\n * @var signerType - the type of the signer (e.g. local, hardware, etc.)\n * @var inner - the inner client of @type {Inner}\n *\n * @method getAddress - get the address of the signer\n * @method signMessage - sign a message\n * @method signTypedData - sign typed data\n */\nexport interface SmartAccountSigner<Inner = any> {\n  signerType: string;\n  inner: Inner;\n\n  getAddress: () => Promise<Address>;\n\n  signMessage: (msg: Uint8Array | Hex | string) => Promise<Hex>;\n\n  signTypedData: (params: SignTypedDataParams) => Promise<Hex>;\n}\n"]}