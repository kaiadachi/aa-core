{"version":3,"file":"defaults.js","sourceRoot":"","sources":["../../../src/utils/defaults.ts"],"names":[],"mappings":";;;AACA,wCAeqB;AAUd,MAAM,2BAA2B,GAAG,CAAC,KAAY,EAAW,EAAE;IACnE,QAAQ,KAAK,CAAC,EAAE,EAAE;QAChB,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,eAAM,CAAC,EAAE,CAAC;QACf,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,sBAAa,CAAC,EAAE,CAAC;QACtB,KAAK,iBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,uBAAc,CAAC,EAAE,CAAC;QACvB,KAAK,wBAAe,CAAC,EAAE,CAAC;QACxB,KAAK,iBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,uBAAc,CAAC,EAAE,CAAC;QACvB,KAAK,wBAAe,CAAC,EAAE,CAAC;QACxB,KAAK,aAAI,CAAC,EAAE,CAAC;QACb,KAAK,mBAAU,CAAC,EAAE,CAAC;QACnB,KAAK,oBAAW,CAAC,EAAE;YACjB,OAAO,4CAA4C,CAAC;KACvD;IACD,MAAM,IAAI,KAAK,CACb,qDAAqD,KAAK,CAAC,IAAI,EAAE,CAClE,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,2BAA2B,+BAqBtC;AASK,MAAM,qCAAqC,GAAG,CACnD,KAAY,EACH,EAAE;IACX,QAAQ,KAAK,CAAC,EAAE,EAAE;QAChB,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,iBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,wBAAe,CAAC,EAAE,CAAC;QACxB,KAAK,iBAAQ,CAAC,EAAE,CAAC;QACjB,KAAK,aAAI,CAAC,EAAE,CAAC;QACb,KAAK,mBAAU,CAAC,EAAE,CAAC;QACnB,KAAK,oBAAW,CAAC,EAAE,CAAC;QACpB,KAAK,wBAAe,CAAC,EAAE;YACrB,OAAO,4CAA4C,CAAC;QACtD,KAAK,gBAAO,CAAC,EAAE,CAAC;QAChB,KAAK,eAAM,CAAC,EAAE,CAAC;QACf,KAAK,sBAAa,CAAC,EAAE,CAAC;QACtB,KAAK,uBAAc,CAAC,EAAE,CAAC;QACvB,KAAK,uBAAc,CAAC,EAAE;YACpB,OAAO,4CAA4C,CAAC;KACvD;IAED,MAAM,IAAI,KAAK,CACb,yDAAyD,KAAK,CAAC,IAAI,EAAE,CACtE,CAAC;AACJ,CAAC,CAAC;AAzBW,QAAA,qCAAqC,yCAyBhD;AAEW,QAAA,4BAA4B,GAAG,IAAI,GAAG,CAAiB;IAClE,CAAC,iBAAQ,CAAC,EAAE,EAAE,SAAW,CAAC;IAC1B,CAAC,uBAAc,CAAC,EAAE,EAAE,SAAW,CAAC;IAChC,CAAC,wBAAe,CAAC,EAAE,EAAE,SAAW,CAAC;CAClC,CAAC,CAAC;AAEI,MAAM,iCAAiC,GAAG,CAC/C,KAAY,EACa,EAAE;IAC3B,OAAO;QACL,oBAAoB,EAAE;YACpB,GAAG,EAAE,oCAA4B,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,UAAY;YAC/D,UAAU,EAAE,EAAE;SACf;KACF,CAAC;AACJ,CAAC,CAAC;AATW,QAAA,iCAAiC,qCAS5C","sourcesContent":["import { type Address, type Chain } from \"viem\";\nimport {\n  arbitrum,\n  arbitrumGoerli,\n  arbitrumSepolia,\n  base,\n  baseGoerli,\n  baseSepolia,\n  goerli,\n  mainnet,\n  optimism,\n  optimismGoerli,\n  optimismSepolia,\n  polygon,\n  polygonMumbai,\n  sepolia,\n} from \"viem/chains\";\nimport type { UserOperationFeeOptions } from \"../types\";\n\n/**\n * Utility method returning the entry point contrafct address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @returns a {@link abi.Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultEntryPointAddress = (chain: Chain): Address => {\n  switch (chain.id) {\n    case mainnet.id:\n    case sepolia.id:\n    case goerli.id:\n    case polygon.id:\n    case polygonMumbai.id:\n    case optimism.id:\n    case optimismGoerli.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case arbitrumGoerli.id:\n    case arbitrumSepolia.id:\n    case base.id:\n    case baseGoerli.id:\n    case baseSepolia.id:\n      return \"0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789\";\n  }\n  throw new Error(\n    `no default entrypoint contract address exists for ${chain.name}`\n  );\n};\n\n/**\n * Utility method returning the default simple account factory address given a {@link Chain} object\n *\n * @param chain - a {@link Chain} object\n * @returns a {@link abi.Address} for the given chain\n * @throws if the chain doesn't have an address currently deployed\n */\nexport const getDefaultSimpleAccountFactoryAddress = (\n  chain: Chain\n): Address => {\n  switch (chain.id) {\n    case mainnet.id:\n    case polygon.id:\n    case optimism.id:\n    case optimismSepolia.id:\n    case arbitrum.id:\n    case base.id:\n    case baseGoerli.id:\n    case baseSepolia.id:\n    case arbitrumSepolia.id:\n      return \"0x15Ba39375ee2Ab563E8873C8390be6f2E2F50232\";\n    case sepolia.id:\n    case goerli.id:\n    case polygonMumbai.id:\n    case optimismGoerli.id:\n    case arbitrumGoerli.id:\n      return \"0x9406Cc6185a346906296840746125a0E44976454\";\n  }\n\n  throw new Error(\n    `no default simple account factory contract exists for ${chain.name}`\n  );\n};\n\nexport const minPriorityFeePerBidDefaults = new Map<number, bigint>([\n  [arbitrum.id, 10_000_000n],\n  [arbitrumGoerli.id, 10_000_000n],\n  [arbitrumSepolia.id, 10_000_000n],\n]);\n\nexport const getDefaultUserOperationFeeOptions = (\n  chain: Chain\n): UserOperationFeeOptions => {\n  return {\n    maxPriorityFeePerGas: {\n      min: minPriorityFeePerBidDefaults.get(chain.id) ?? 100_000_000n,\n      percentage: 33,\n    },\n  };\n};\n"]}