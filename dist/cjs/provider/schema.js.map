{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/provider/schema.ts"],"names":[],"mappings":";;;;;;AAAA,qCAAsC;AAEtC,8CAAoB;AACpB,mDAAsE;AAEtE,gDAI2B;AAEd,QAAA,kCAAkC,GAC7C,kCAAuB,CAAC,KAAK,CAAC,2BAAgB,CAAC,CAAC,OAAO,EAAE,CAAC;AAE/C,QAAA,6BAA6B,GAAG,aAAC;KAC3C,MAAM,CAAC;IACN,YAAY,EAAE,0CAAkC;IAChD,oBAAoB,EAAE,0CAAkC;IACxD,YAAY,EAAE,0CAAkC;IAChD,oBAAoB,EAAE,0CAAkC;IACxD,kBAAkB,EAAE,0CAAkC;CACvD,CAAC;KACD,OAAO,EAAE;KACT,MAAM,EAAE,CAAC;AAEC,QAAA,8BAA8B,GAAG,aAAC;KAC5C,MAAM,CAAC;IAIN,YAAY,EAAE,aAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IAK1C,iBAAiB,EAAE,aAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IAK/C,iBAAiB,EAAE,aAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE;IAK/C,UAAU,EAAE,qCAA6B,CAAC,QAAQ,EAAE;CACrD,CAAC;KACD,MAAM,EAAE,CAAC;AAEL,MAAM,sCAAsC,GAAG,GAElD,EAAE;IACJ,OAAO,aAAC,CAAC,MAAM,CAAC;QACd,WAAW,EAAE,aAAC,CAAC,KAAK,CAAC;YACnB,aAAC,CAAC,MAAM,EAAE;YACV,IAAA,2CAA+B,GAAc;SAC9C,CAAC;QACF,KAAK,EAAE,sBAAW;QASlB,iBAAiB,EAAE,aAAO,CAAC,QAAQ,EAAE;QACrC,IAAI,EAAE,sCAA8B,CAAC,QAAQ,EAAE;KAChD,CAAC,CAAC;AACL,CAAC,CAAC;AApBW,QAAA,sCAAsC,0CAoBjD","sourcesContent":["import { Address } from \"abitype/zod\";\nimport type { Transport } from \"viem\";\nimport z from \"zod\";\nimport { createPublicErc4337ClientSchema } from \"../client/schema.js\";\nimport type { SupportedTransports } from \"../client/types\";\nimport {\n  BigNumberishRangeSchema,\n  ChainSchema,\n  PercentageSchema,\n} from \"../utils/index.js\";\n\nexport const UserOperationFeeOptionsFieldSchema =\n  BigNumberishRangeSchema.merge(PercentageSchema).partial();\n\nexport const UserOperationFeeOptionsSchema = z\n  .object({\n    maxFeePerGas: UserOperationFeeOptionsFieldSchema,\n    maxPriorityFeePerGas: UserOperationFeeOptionsFieldSchema,\n    callGasLimit: UserOperationFeeOptionsFieldSchema,\n    verificationGasLimit: UserOperationFeeOptionsFieldSchema,\n    preVerificationGas: UserOperationFeeOptionsFieldSchema,\n  })\n  .partial()\n  .strict();\n\nexport const SmartAccountProviderOptsSchema = z\n  .object({\n    /**\n     * The maximum number of times to try fetching a transaction receipt before giving up (default: 5)\n     */\n    txMaxRetries: z.number().min(0).optional(),\n\n    /**\n     * The interval in milliseconds to wait between retries while waiting for tx receipts (default: 2_000)\n     */\n    txRetryIntervalMs: z.number().min(0).optional(),\n\n    /**\n     * The mulitplier on interval length to wait between retries while waiting for tx receipts (default: 1.5)\n     */\n    txRetryMulitplier: z.number().min(0).optional(),\n\n    /**\n     * Optional user operation fee options to be set globally at the provider level\n     */\n    feeOptions: UserOperationFeeOptionsSchema.optional(),\n  })\n  .strict();\n\nexport const createSmartAccountProviderConfigSchema = <\n  TTransport extends SupportedTransports = Transport\n>() => {\n  return z.object({\n    rpcProvider: z.union([\n      z.string(),\n      createPublicErc4337ClientSchema<TTransport>(),\n    ]),\n    chain: ChainSchema,\n    /**\n     * Optional entry point contract address for override if needed.\n     * If not provided, the entry point contract address for the provider is the connected account's entry point contract,\n     * or if not connected, falls back to the default entry point contract for the chain.\n     *\n     * Refer to https://docs.alchemy.com/reference/eth-supportedentrypoints for all the supported entrypoints\n     * when using Alchemy as your RPC provider.\n     */\n    entryPointAddress: Address.optional(),\n    opts: SmartAccountProviderOptsSchema.optional(),\n  });\n};\n"]}