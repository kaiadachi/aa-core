{"version":3,"file":"base.js","sourceRoot":"","sources":["../../../src/provider/base.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,IAAI,YAAY,EAAE,MAAM,eAAe,CAAC;AACxD,OAAO,EACL,OAAO,EACP,KAAK,GAQN,MAAM,MAAM,CAAC;AAKd,OAAO,EAAE,yBAAyB,EAAE,MAAM,4BAA4B,CAAC;AAKvE,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAUN,MAAM,aAAa,CAAC;AACrB,OAAO,EACL,cAAc,EACd,SAAS,EACT,SAAS,EACT,aAAa,EACb,WAAW,EACX,cAAc,EACd,eAAe,EACf,2BAA2B,EAC3B,iCAAiC,EACjC,oBAAoB,EACpB,cAAc,EACd,iBAAiB,GAElB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,sCAAsC,EAAE,MAAM,aAAa,CAAC;AAarE,MAAM,CAAC,MAAM,cAAc,GAAwB,KAAK,EACtD,MAAuC,EACvC,UAAmC,EACnC,WAAqC,EACrC,EAAE,CAAC,MAAM,CAAC;AAEZ,MAAM,OAAO,oBAGX,SAAQ,YAA4B;IAiBpC,YAAY,MAA8C;QACxD,sCAAsC,EAAc,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEnE,MAAM,EAAE,WAAW,EAAE,iBAAiB,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC;QAE/D,KAAK,EAAE,CAAC;QAnBF;;;;;WAAqB;QACrB;;;;;WAA0B;QAC1B;;;;;WAA0B;QAC1B;;;;;WAAoC;QAEnC;;;;;WAAgC;QAE/B;;;;;WAA4B;QAC5B;;;;;WAAa;QAEvB;;;;;WAEuC;QA8BvC;;;;mBAAsE,KAAK,EACzE,IAAI,EACJ,EAAE;gBACF,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;gBAChC,QAAQ,MAAM,EAAE;oBACd,KAAK,qBAAqB;wBACxB,MAAM,CAAC,EAAE,CAAC,GAAG,MAAiC,CAAC;wBAC/C,OAAO,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;oBAClC,KAAK,UAAU;wBACb,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,MAAO,CAAC;wBAChC,IAAI,OAAO,KAAK,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE;4BACzC,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;yBACH;wBACD,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBAChC,KAAK,eAAe,CAAC,CAAC;wBACpB,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,MAAO,CAAC;wBAChC,IAAI,OAAO,KAAK,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE;4BACzC,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;yBACH;wBACD,OAAO,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;qBAC/B;oBACD,KAAK,sBAAsB,CAAC,CAAC;wBAC3B,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,MAAO,CAAC;wBACtC,IAAI,OAAO,KAAK,CAAC,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC,EAAE;4BACzC,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;yBACH;wBACD,OAAO,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;qBACvC;oBACD,KAAK,aAAa;wBAChB,OAAO,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;oBACvB;wBAIE,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;iBACvC;YACH,CAAC;WAAC;QAEF;;;;mBAAa,GAA2B,EAAE;gBACxC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YACnC,CAAC;WAAC;QAEF;;;;mBAAa,CAAC,IAAa,EAAE,EAAE;gBAC7B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YAChC,CAAC;WAAC;QAEF;;;;mBAAc,KAAK,EAAE,GAAwB,EAAiB,EAAE;gBAC9D,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBACD,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YACvC,CAAC;WAAC;QAEF;;;;mBAAgB,KAAK,EAAE,MAA2B,EAAiB,EAAE;gBACnE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC;WAAC;QAEF;;;;mBAAsB,CAAC,GAAwB,EAA0B,EAAE;gBACzE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAC/C,CAAC;WAAC;QAEF;;;;mBAAwB,CACtB,MAA2B,EACH,EAAE;gBAC1B,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,OAAO,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC;YACpD,CAAC;WAAC;QAEF;;;;mBAAkB,KAAK,EACrB,OAA8B,EAC9B,SAAkC,EACnB,EAAE;gBACjB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;gBAEzE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBAEzD,OAAO,MAAM,IAAI,CAAC,+BAA+B,CAAC,IAAY,CAAC,CAAC;YAClE,CAAC;WAAC;QAEF;;;;mBAA2B,KAAK,EAC9B,OAA8B,EAC9B,SAAkC,EACJ,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;oBACf,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;iBACtD;gBAED,MAAM,UAAU,GAA2B;oBACzC,YAAY,EACV,SAAS,EAAE,YAAY,IAAI,IAAI;wBAC7B,CAAC,CAAC,SAAS,EAAE,YAAY;wBACzB,CAAC,CAAC,OAAO,CAAC,YAAY;4BACtB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,EAAE,QAAQ,CAAC;4BACzC,CAAC,CAAC,SAAS;oBACf,oBAAoB,EAClB,SAAS,EAAE,oBAAoB,IAAI,IAAI;wBACrC,CAAC,CAAC,SAAS,EAAE,oBAAoB;wBACjC,CAAC,CAAC,OAAO,CAAC,oBAAoB;4BAC9B,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,oBAAoB,EAAE,QAAQ,CAAC;4BACjD,CAAC,CAAC,SAAS;iBAChB,CAAC;gBACF,eAAe,CAAC,UAAU,CAAC,CAAC;gBAE5B,OAAO,IAAI,CAAC,kBAAkB,CAC5B;oBACE,MAAM,EAAE,OAAO,CAAC,EAAE;oBAClB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,IAAI;oBAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;iBAC7D,EACD,UAAU,CACX,CAAC;YACJ,CAAC;WAAC;QAEF;;;;mBAA4B,CAC1B,QAAiC,EACjC,SAAkC,EAClC,EAAE;gBACF,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;oBACrC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE;wBACf,MAAM,IAAI,KAAK,CACb,0DAA0D,CAC3D,CAAC;qBACH;oBAED,OAAO;wBACL,MAAM,EAAE,OAAO,CAAC,EAAE;wBAClB,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,IAAI;wBAC1B,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE;qBAC7D,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,MAAM,YAAY,GAChB,SAAS,EAAE,YAAY,IAAI,IAAI;oBAC7B,CAAC,CAAC,SAAS,EAAE,YAAY;oBACzB,CAAC,CAAC,SAAS,CACP,GAAG,QAAQ;yBACR,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC;yBACrC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,YAAa,EAAE,QAAQ,CAAC,CAAC,CAClD,CAAC;gBACR,MAAM,oBAAoB,GACxB,SAAS,EAAE,oBAAoB,IAAI,IAAI;oBACrC,CAAC,CAAC,SAAS,EAAE,oBAAoB;oBACjC,CAAC,CAAC,SAAS,CACP,GAAG,QAAQ;yBACR,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,IAAI,CAAC;yBAC7C,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,oBAAqB,EAAE,QAAQ,CAAC,CAAC,CAC1D,CAAC;gBAER,MAAM,UAAU,GAA2B;oBACzC,YAAY;oBACZ,oBAAoB;iBACrB,CAAC;gBACF,eAAe,CAAC,UAAU,CAAC,CAAC;gBAE5B,OAAO;oBACL,KAAK;oBACL,SAAS;iBACV,CAAC;YACJ,CAAC;WAAC;QAEF;;;;mBAAmB,KAAK,EACtB,QAAiC,EACjC,SAAkC,EAClC,EAAE;gBACF,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,yBAAyB,CACrE,QAAQ,EACR,SAAS,CACV,CAAC;gBAEF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;gBAEjE,OAAO,MAAM,IAAI,CAAC,+BAA+B,CAAC,IAAY,CAAC,CAAC;YAClE,CAAC;WAAC;QAEF;;;;mBAAkC,KAAK,EAAE,IAAU,EAAiB,EAAE;gBACpE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE;oBAC1C,MAAM,2BAA2B,GAC/B,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;wBAC5D,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,CAAC;oBAEtB,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAC5B,UAAU,CAAC,OAAO,EAAE,2BAA2B,CAAC,CACjD,CAAC;oBACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,uBAAuB,CAChD,IAAqB,CACtB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;wBACZ,MAAM,CAAC,KAAK,CACV,qFAAqF,IAAI,KAAK,CAAC,EAAE,CAClG,CAAC;oBACJ,CAAC,CAAC,CAAC;oBACH,IAAI,OAAO,EAAE;wBACX,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,CAC9D,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,CACd,CAAC;qBACH;iBACF;gBAED,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;YACnE,CAAC;WAAC;QAEF;;;;mBAAyB,CACvB,IAAU,EAC6B,EAAE;gBACzC,OAAO,IAAI,CAAC,SAAS,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;YACrD,CAAC;WAAC;QAEF;;;;mBAA0B,CACxB,IAAU,EAC4B,EAAE;gBACxC,OAAO,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YACtD,CAAC;WAAC;QAEF;;;;mBAAiB,CAAC,IAAU,EAAwB,EAAE;gBACpD,OAAO,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;YACvD,CAAC;WAAC;QAEF;;;;mBAAqB,KAAK,EACxB,IAAwD,EACxD,SAAkC,EAClC,EAAE;gBACF,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;iBAC3C;gBAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;gBAClD,OAAO,IAAI,CAAC,mBAAmB,CAC7B;oBACE,QAAQ;oBACR,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE;oBACzB,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE;oBAC9B,QAAQ,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;wBAC3B,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC;wBACvC,CAAC,CAAC,OAAO,IAAI,KAAK,QAAQ;4BAC1B,CAAC,CAAC,IAAI;4BACN,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CACxB,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,KAAK,IAAI,EAAE,EAChB,IAAI,CAAC,IAAI,CACV;oBACL,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE;iBACT,EACpC,SAAS,CACV,CAAC;YACJ,CAAC;WAAC;QAEF;;;;mBAAoB,KAAK,EACvB,IAAwD,EACxD,SAAkC,EACA,EAAE;gBACpC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBAC1C;gBAED,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;gBAChE,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAA8B,KAAK,EACjC,QAA8B,EAC9B,SAAkC,EACA,EAAE;gBACpC,MAAM,UAAU,GAAG;oBACjB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,KAAK,EAAE,QAAQ,CAAC,KAAK;oBACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;oBAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;iBACP,CAAC;gBAIzB,MAAM,EAAE,YAAY,EAAE,oBAAoB,EAAE,GAC1C,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;gBAExD,MAAM,UAAU,GAA2B;oBACzC,YAAY,EAAE,SAAS,CACrB,MAAM,CAAC,YAAY,IAAI,EAAE,CAAC,EAC1B,aAAa,CAAC,QAAQ,CAAC,YAAY,EAAE,IAAI,CAAC,CAC3C;oBACD,oBAAoB,EAAE,SAAS,CAC7B,MAAM,CAAC,oBAAoB,IAAI,EAAE,CAAC,EAClC,aAAa,CAAC,QAAQ,CAAC,oBAAoB,EAAE,IAAI,CAAC,CACnD;oBACD,gBAAgB,EAAE,QAAQ,CAAC,gBAAgB;iBAC5C,CAAC;gBAEF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;gBACxE,OAAO,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC;YAC3C,CAAC;WAAC;QAEF;;;;mBAAiC,KAAK,EACpC,IAAwD,EACxD,SAAkC,EAChB,EAAE;gBACpB,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC;qBAC5C,IAAI,CACH,CAAC,mBAAwC,EAAE,EAAE,CAC3C,mBAAmB,CAAC,gBAAgB,KAAK,IAAI;oBAC7C,mBAAmB,CAAC,gBAAgB,KAAK,IAAI,CAChD;qBACA,KAAK,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;YACxB,CAAC;WAAC;QAEM;;;;mBAAsB,KAAK,EACjC,EAAmC,EACnC,SAAkC,EAClC,EAAE;gBACF,MAAM,MAAM,GAAG,MAAM,SAAS,CAC5B,IAAI,CAAC,4BAA4B,EACjC,IAAI,CAAC,aAAa,EAClB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,gBAAgB,IAAI,cAAc,EACvC,SAAS,EAAE,gBAAgB,IAAI,IAAI;oBACjC,CAAC,CAAC,IAAI,CAAC,+BAA+B;oBACtC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAChC,IAAI,CAAC,oBAAoB,CAC1B,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;gBAElC,OAAO,iBAAiB,CAAsB,MAAM,CAAC,CAAC;YACxD,CAAC;WAAC;QAEM;;;;mBAAqB,KAAK,EAAE,QAA6B,EAAE,EAAE;gBACnE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;iBAC1C;gBAED,MAAM,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;gBACtC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;oBAE5B,MAAM,IAAI,KAAK,CACb,yFAAyF,IAAI,CAAC,SAAS,CACrG,QAAQ,EACR,IAAI,EACJ,CAAC,CACF,EAAE,CACJ,CAAC;iBACH;gBAED,OAAO,CAAC,SAAS,GAAG,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,qBAAqB,CAC3D,oBAAoB,CAClB,OAAO,EACP,IAAI,CAAC,oBAAoB,EAAE,EAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CACtB,CACF,CAAkB,CAAC;gBAEpB,OAAO;oBACL,IAAI,EAAE,MAAM,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAC1C,OAAO,EACP,IAAI,CAAC,oBAAoB,EAAE,CAC5B;oBACD,OAAO;iBACR,CAAC;YACJ,CAAC;WAAC;QAKO;;;;mBAAoD,KAAK,EAChE,MAAM,EACN,UAAU,EACV,WAAW,EACX,EAAE;gBACF,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC/B,OAAO,MAAM,CAAC;YAChB,CAAC;WAAC;QAEO;;;;mBAAuD,KAAK,EACnE,MAAM,EACN,SAAS,EACT,WAAW,EACX,EAAE;gBACF,MAAM,CAAC,gBAAgB;oBACrB,SAAS,EAAE,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAC,SAAS,EAAE,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC3E,OAAO,MAAM,CAAC;YAChB,CAAC;WAAC;QAEO;;;;mBAA+C,KAAK,EAC3D,MAAM,EACN,UAAU,EACV,WAAW,EACX,EAAE;gBACF,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC;gBAC/B,OAAO,MAAM,CAAC;YAChB,CAAC;WAAC;QAEO;;;;mBAAoC,KAAK,EAChD,MAAM,EACN,SAAS,EACT,UAAU,EACV,EAAE;gBACF,IAAI,EAAE,YAAY,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,GAC5D,SAAS,IAAI,EAAE,CAAC;gBAElB,IACE,YAAY,IAAI,IAAI;oBACpB,oBAAoB,IAAI,IAAI;oBAC5B,kBAAkB,IAAI,IAAI,EAC1B;oBACA,MAAM,OAAO,GAAG,WAAW,CAAC,MAAM,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC7D,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAC7D,OAAO,EACP,IAAI,CAAC,oBAAoB,EAAE,CAC5B,CAAC;oBAEF,YAAY;wBACV,YAAY;4BACZ,cAAc,CAAC,SAAS,CAAC,YAAY,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;oBACnE,oBAAoB;wBAClB,oBAAoB;4BACpB,cAAc,CACZ,SAAS,CAAC,oBAAoB,EAC9B,UAAU,EAAE,oBAAoB,CACjC,CAAC;oBACJ,kBAAkB;wBAChB,kBAAkB;4BAClB,cAAc,CACZ,SAAS,CAAC,kBAAkB,EAC5B,UAAU,EAAE,kBAAkB,CAC/B,CAAC;iBACL;gBAED,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC;gBACnC,MAAM,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;gBACnD,MAAM,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;gBAE/C,OAAO,MAAM,CAAC;YAChB,CAAC;WAAC;QAEO;;;;mBAAqC,KAAK,EACjD,MAAM,EACN,SAAS,EACT,UAAU,EACV,EAAE;gBACF,MAAM,4BAA4B,GAAG,KAAK,IAAI,EAAE;oBAC9C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,4BAA4B,EAAE,CAAC;oBACrE,OAAO,cAAc,CAAC,QAAQ,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;gBACpE,CAAC,CAAC;gBAUF,MAAM,oBAAoB,GAAG,KAAK,EAAE,oBAAkC,EAAE,EAAE;oBACxE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,kBAAkB,EAAE,CAAC;oBAC1D,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,CAAC,OAAO,CAAC,oBAAoB,EAAE;wBAC1D,MAAM,IAAI,KAAK,CACb,yDAAyD,CAC1D,CAAC;qBACH;oBACD,MAAM,OAAO,GAAG,cAAc,CAC5B,OAAO,CAAC,YAAY,GAAG,OAAO,CAAC,oBAAoB,EACnD,UAAU,EAAE,YAAY,CACzB,CAAC;oBAEF,OAAO,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,oBAAoB,CAAC,CAAC;gBACxD,CAAC,CAAC;gBAEF,MAAM,CAAC,oBAAoB;oBACzB,SAAS,EAAE,oBAAoB,IAAI,IAAI;wBACrC,CAAC,CAAC,SAAS,EAAE,oBAAoB;wBACjC,CAAC,CAAC,MAAM,4BAA4B,EAAE,CAAC;gBAC3C,MAAM,CAAC,YAAY;oBACjB,SAAS,EAAE,YAAY,IAAI,IAAI;wBAC7B,CAAC,CAAC,SAAS,EAAE,YAAY;wBACzB,CAAC,CAAC,MAAM,oBAAoB,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;gBAE9D,OAAO,MAAM,CAAC;YAChB,CAAC;WAAC;QAEO;;;;mBAAwC,cAAc;WAAC;QAEvD;;;;mBAA4C,cAAc;WAAC;QAEpE;;;;mBAA0B,CAAC,SAG1B,EAAQ,EAAE;gBACT,MAAM,kBAAkB,GAAG,SAAS,CAAC,4BAA4B;oBAC/D,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,4BAA4B,CAAC;oBACzE,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC;gBACtC,cAAc,CAAC,IAAI,EAAE,8BAA8B,EAAE,kBAAkB,CAAC,CAAC;gBAEzE,MAAM,sBAAsB,GAAG,SAAS,CAAC,uBAAuB;oBAC9D,CAAC,CAAC,IAAI,CAAC,0BAA0B,CAAC,SAAS,CAAC,uBAAuB,CAAC;oBACpE,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC;gBACjC,cAAc,CAAC,IAAI,EAAE,yBAAyB,EAAE,sBAAsB,CAAC,CAAC;gBAExE,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAmB,CAAC,QAAgC,EAAQ,EAAE;gBAC5D,cAAc,CACZ,IAAI,EACJ,cAAc,EACd,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAC1C,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAoB,CAAC,QAA2B,EAAQ,EAAE;gBACxD,cAAc,CACZ,IAAI,EACJ,eAAe,EACf,IAAI,CAAC,0BAA0B,CAAC,QAAQ,CAAC,CAC1C,CAAC;gBACF,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAuB,CAAC,QAA6B,EAAQ,EAAE;gBAC7D,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;gBAEnD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAA2B,CAAC,QAA6B,EAAQ,EAAE;gBACjE,cAAc,CAAC,IAAI,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;gBAEvD,OAAO,IAAI,CAAC;YACd,CAAC;WAAC;QAEF;;;;mBAAU,CACR,EAIa,EACiB,EAAE;gBAChC,MAAM,OAAO,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;gBAGnC,IACE,IAAI,CAAC,iBAAiB;oBACtB,OAAO,CAAC,oBAAoB,EAAE,KAAK,IAAI,CAAC,iBAAiB,EACzD;oBACA,MAAM,IAAI,KAAK,CACb,+BAA+B,OAAO,CAAC,oBAAoB,EAAE,8DAC3D,IAAI,CAAC,iBACP,EAAE,CACH,CAAC;iBACH;gBAED,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC;gBAEzC,IAAI,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,KAAK,MAAM,EAAE;oBAC5C,MAAM,EAAE,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,YAAY,EAAE,GAAG,IAAI;yBACpE,SAAS,CAAC,SACuB,CAAC;oBAErC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;oBAClC,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;oBAEnD,IAAI,CAAC,SAAS,GAAG,yBAAyB,CAAC;wBACzC,KAAK,EAAE,IAAI,CAAC,KAAK;wBACjB,MAAM,EAAE,GAAG;wBACX,YAAY,EAAE;4BACZ,GAAG,YAAY;4BACf,OAAO,EAAE;gCACP,GAAG,YAAY,EAAE,OAAO;gCACxB,uBAAuB,EAAE,MAAM,EAAE,UAAU,IAAI,SAAS;gCACxD,gCAAgC,EAAE,cAAc;6BACjD;yBACF;qBACF,CAAC,CAAC;iBACJ;gBAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;oBACnB,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC;iBAC9B,CAAC,CAAC;gBAEH,OAAO;qBACJ,UAAU,EAAE;qBACZ,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAE9D,OAAO,IAA+C,CAAC;YACzD,CAAC;WAAC;QAEF;;;;mBAAa,GAAkC,EAAE;gBAC/C,IAAI,IAAI,CAAC,OAAO,EAAE;oBAChB,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;oBACxB,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC;iBAClC;gBAED,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;gBAE3C,OAAO,IAAqC,CAAC;YAC/C,CAAC;WAAC;QAEF;;;;mBAAc,GAEZ,EAAE;gBACF,OAAO,IAAI,CAAC,OAAO,KAAK,SAAS,CAAC;YACpC,CAAC;WAAC;QAKF;;;;mBAAuB,GAAY,EAAE;gBACnC,OAAO,CACL,IAAI,CAAC,iBAAiB;oBACtB,IAAI,CAAC,OAAO,EAAE,oBAAoB,EAAE;oBACpC,2BAA2B,CAAC,IAAI,CAAC,KAAK,CAAC,CACxC,CAAC;YACJ,CAAC;WAAC;QAEF;;;;mBAAS,CAAI,EAAqB,EAAY,EAAE;gBAC9C,MAAM,QAAQ,GAAG,EAAE,CAAC,IAAI,CAAQ,CAAC;gBAEjC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;oBACtB,OAAO,QAAQ,CAAC,GAAG,CAAC,CAAC;iBACtB;gBAED,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACvC,CAAC;WAAC;QAEM;;;;mBAA6B,CACnC,QAAqC,EAChB,EAAE;gBACvB,OAAO,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE;oBACjC,OAAO;wBACL,GAAG,MAAM;wBACT,GAAG,CAAC,MAAM,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;qBACvC,CAAC;gBACJ,CAAC,CAAC;YACJ,CAAC;WAAC;QAlqBA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,IAAI,CAAC,YAAY,GAAG,IAAI,EAAE,YAAY,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,iBAAiB,GAAG,IAAI,EAAE,iBAAiB,IAAI,IAAI,CAAC;QACzD,IAAI,CAAC,iBAAiB,GAAG,IAAI,EAAE,iBAAiB,IAAI,GAAG,CAAC;QACxD,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAE3C,IAAI,CAAC,UAAU,GAAG;YAChB,GAAG,iCAAiC,CAAC,KAAK,CAAC;YAC3C,GAAG,IAAI,EAAE,UAAU;SACpB,CAAC;QAEF,IAAI,CAAC,SAAS;YACZ,OAAO,WAAW,KAAK,QAAQ;gBAC7B,CAAC,CAAC,yBAAyB,CAAC;oBACxB,KAAK;oBACL,MAAM,EAAE,WAAW;iBACpB,CAAC;gBACJ,CAAC,CAAC,WAAW,CAAC;IACpB,CAAC;CAgpBF","sourcesContent":["import { default as EventEmitter } from \"eventemitter3\";\nimport {\n  fromHex,\n  toHex,\n  type Address,\n  type Chain,\n  type Hash,\n  type HttpTransport,\n  type RpcTransactionRequest,\n  type Transaction,\n  type Transport,\n} from \"viem\";\nimport type {\n  ISmartContractAccount,\n  SignTypedDataParams,\n} from \"../account/types.js\";\nimport { createPublicErc4337Client } from \"../client/create-client.js\";\nimport type {\n  PublicErc4337Client,\n  SupportedTransports,\n} from \"../client/types.js\";\nimport { Logger } from \"../logger.js\";\nimport {\n  type BatchUserOperationCallData,\n  type BigNumberish,\n  type UserOperationCallData,\n  type UserOperationFeeOptions,\n  type UserOperationOverrides,\n  type UserOperationReceipt,\n  type UserOperationRequest,\n  type UserOperationResponse,\n  type UserOperationStruct,\n} from \"../types.js\";\nimport {\n  applyFeeOption,\n  asyncPipe,\n  bigIntMax,\n  bigIntPercent,\n  deepHexlify,\n  defineReadOnly,\n  filterUndefined,\n  getDefaultEntryPointAddress,\n  getDefaultUserOperationFeeOptions,\n  getUserOperationHash,\n  isValidRequest,\n  resolveProperties,\n  type Deferrable,\n} from \"../utils/index.js\";\nimport { createSmartAccountProviderConfigSchema } from \"./schema.js\";\nimport type {\n  AccountMiddlewareFn,\n  AccountMiddlewareOverrideFn,\n  FeeDataMiddleware,\n  GasEstimatorMiddleware,\n  ISmartAccountProvider,\n  PaymasterAndDataMiddleware,\n  ProviderEvents,\n  SendUserOperationResult,\n  SmartAccountProviderConfig,\n} from \"./types.js\";\n\nexport const noOpMiddleware: AccountMiddlewareFn = async (\n  struct: Deferrable<UserOperationStruct>,\n  _overrides?: UserOperationOverrides,\n  _feeOptions?: UserOperationFeeOptions\n) => struct;\n\nexport class SmartAccountProvider<\n    TTransport extends SupportedTransports = Transport\n  >\n  extends EventEmitter<ProviderEvents>\n  implements ISmartAccountProvider<TTransport>\n{\n  private txMaxRetries: number;\n  private txRetryIntervalMs: number;\n  private txRetryMulitplier: number;\n  private feeOptions: UserOperationFeeOptions;\n\n  readonly account?: ISmartContractAccount;\n\n  protected entryPointAddress?: Address;\n  protected chain: Chain;\n\n  rpcClient:\n    | PublicErc4337Client<TTransport>\n    | PublicErc4337Client<HttpTransport>;\n\n  constructor(config: SmartAccountProviderConfig<TTransport>) {\n    createSmartAccountProviderConfigSchema<TTransport>().parse(config);\n\n    const { rpcProvider, entryPointAddress, chain, opts } = config;\n\n    super();\n\n    this.chain = chain;\n\n    this.txMaxRetries = opts?.txMaxRetries ?? 5;\n    this.txRetryIntervalMs = opts?.txRetryIntervalMs ?? 2000;\n    this.txRetryMulitplier = opts?.txRetryMulitplier ?? 1.5;\n    this.entryPointAddress = entryPointAddress;\n\n    this.feeOptions = {\n      ...getDefaultUserOperationFeeOptions(chain),\n      ...opts?.feeOptions,\n    };\n\n    this.rpcClient =\n      typeof rpcProvider === \"string\"\n        ? createPublicErc4337Client({\n            chain,\n            rpcUrl: rpcProvider,\n          })\n        : rpcProvider;\n  }\n\n  request: (args: { method: string; params?: any[] }) => Promise<any> = async (\n    args\n  ) => {\n    const { method, params } = args;\n    switch (method) {\n      case \"eth_sendTransaction\":\n        const [tx] = params as [RpcTransactionRequest];\n        return this.sendTransaction(tx);\n      case \"eth_sign\":\n        const [address, data] = params!;\n        if (address !== (await this.getAddress())) {\n          throw new Error(\n            \"cannot sign for address that is not the current account\"\n          );\n        }\n        return this.signMessage(data);\n      case \"personal_sign\": {\n        const [data, address] = params!;\n        if (address !== (await this.getAddress())) {\n          throw new Error(\n            \"cannot sign for address that is not the current account\"\n          );\n        }\n        return this.signMessage(data);\n      }\n      case \"eth_signTypedData_v4\": {\n        const [address, dataParams] = params!;\n        if (address !== (await this.getAddress())) {\n          throw new Error(\n            \"cannot sign for address that is not the current account\"\n          );\n        }\n        return this.signTypedData(dataParams);\n      }\n      case \"eth_chainId\":\n        return this.chain.id;\n      default:\n        // TODO: there's probably a number of methods we just don't support, will need to test most of them out\n        // first let's get something working though\n        // @ts-expect-error the typing with viem clashes here, we'll need to fix the typing on this method\n        return this.rpcClient.request(args);\n    }\n  };\n\n  getAddress = (): Promise<`0x${string}`> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.getAddress();\n  };\n\n  setAddress = (addr: Address) => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    this.account.setAddress(addr);\n  };\n\n  signMessage = async (msg: string | Uint8Array): Promise<Hash> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n    return this.account.signMessage(msg);\n  };\n\n  signTypedData = async (params: SignTypedDataParams): Promise<Hash> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signTypedData(params);\n  };\n\n  signMessageWith6492 = (msg: string | Uint8Array): Promise<`0x${string}`> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signMessageWith6492(msg);\n  };\n\n  signTypedDataWith6492 = (\n    params: SignTypedDataParams\n  ): Promise<`0x${string}`> => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    return this.account.signTypedDataWith6492(params);\n  };\n\n  sendTransaction = async (\n    request: RpcTransactionRequest,\n    overrides?: UserOperationOverrides\n  ): Promise<Hash> => {\n    const uoStruct = await this.buildUserOperationFromTx(request, overrides);\n\n    const { hash } = await this._sendUserOperation(uoStruct);\n\n    return await this.waitForUserOperationTransaction(hash as Hash);\n  };\n\n  buildUserOperationFromTx = async (\n    request: RpcTransactionRequest,\n    overrides?: UserOperationOverrides\n  ): Promise<UserOperationStruct> => {\n    if (!request.to) {\n      throw new Error(\"transaction is missing to address\");\n    }\n\n    const _overrides: UserOperationOverrides = {\n      maxFeePerGas:\n        overrides?.maxFeePerGas != null\n          ? overrides?.maxFeePerGas\n          : request.maxFeePerGas\n          ? fromHex(request.maxFeePerGas, \"bigint\")\n          : undefined,\n      maxPriorityFeePerGas:\n        overrides?.maxPriorityFeePerGas != null\n          ? overrides?.maxPriorityFeePerGas\n          : request.maxPriorityFeePerGas\n          ? fromHex(request.maxPriorityFeePerGas, \"bigint\")\n          : undefined,\n    };\n    filterUndefined(_overrides);\n\n    return this.buildUserOperation(\n      {\n        target: request.to,\n        data: request.data ?? \"0x\",\n        value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n      },\n      _overrides\n    );\n  };\n\n  buildUserOperationFromTxs = (\n    requests: RpcTransactionRequest[],\n    overrides?: UserOperationOverrides\n  ) => {\n    const batch = requests.map((request) => {\n      if (!request.to) {\n        throw new Error(\n          \"one transaction in the batch is missing a target address\"\n        );\n      }\n\n      return {\n        target: request.to,\n        data: request.data ?? \"0x\",\n        value: request.value ? fromHex(request.value, \"bigint\") : 0n,\n      };\n    });\n\n    const maxFeePerGas =\n      overrides?.maxFeePerGas != null\n        ? overrides?.maxFeePerGas\n        : bigIntMax(\n            ...requests\n              .filter((x) => x.maxFeePerGas != null)\n              .map((x) => fromHex(x.maxFeePerGas!, \"bigint\"))\n          );\n    const maxPriorityFeePerGas =\n      overrides?.maxPriorityFeePerGas != null\n        ? overrides?.maxPriorityFeePerGas\n        : bigIntMax(\n            ...requests\n              .filter((x) => x.maxPriorityFeePerGas != null)\n              .map((x) => fromHex(x.maxPriorityFeePerGas!, \"bigint\"))\n          );\n\n    const _overrides: UserOperationOverrides = {\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n    };\n    filterUndefined(_overrides);\n\n    return {\n      batch,\n      overrides,\n    };\n  };\n\n  sendTransactions = async (\n    requests: RpcTransactionRequest[],\n    overrides?: UserOperationOverrides\n  ) => {\n    const { batch, overrides: _overrides } = this.buildUserOperationFromTxs(\n      requests,\n      overrides\n    );\n\n    const { hash } = await this.sendUserOperation(batch, _overrides);\n\n    return await this.waitForUserOperationTransaction(hash as Hash);\n  };\n\n  waitForUserOperationTransaction = async (hash: Hash): Promise<Hash> => {\n    for (let i = 0; i < this.txMaxRetries; i++) {\n      const txRetryIntervalWithJitterMs =\n        this.txRetryIntervalMs * Math.pow(this.txRetryMulitplier, i) +\n        Math.random() * 100;\n\n      await new Promise((resolve) =>\n        setTimeout(resolve, txRetryIntervalWithJitterMs)\n      );\n      const receipt = await this.getUserOperationReceipt(\n        hash as `0x${string}`\n      ).catch((e) => {\n        Logger.error(\n          `[SmartAccountProvider] waitForUserOperationTransaction error fetching receipt for ${hash}: ${e}`\n        );\n      });\n      if (receipt) {\n        return this.getTransaction(receipt.receipt.transactionHash).then(\n          (x) => x.hash\n        );\n      }\n    }\n\n    throw new Error(\"Failed to find transaction for User Operation\");\n  };\n\n  getUserOperationByHash = (\n    hash: Hash\n  ): Promise<UserOperationResponse | null> => {\n    return this.rpcClient.getUserOperationByHash(hash);\n  };\n\n  getUserOperationReceipt = (\n    hash: Hash\n  ): Promise<UserOperationReceipt | null> => {\n    return this.rpcClient.getUserOperationReceipt(hash);\n  };\n\n  getTransaction = (hash: Hash): Promise<Transaction> => {\n    return this.rpcClient.getTransaction({ hash: hash });\n  };\n\n  buildUserOperation = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ) => {\n    if (!this.account) {\n      throw new Error(\"account not connected!\");\n    }\n\n    const initCode = await this.account.getInitCode();\n    return this._runMiddlewareStack(\n      {\n        initCode,\n        sender: this.getAddress(),\n        nonce: this.account.getNonce(),\n        callData: Array.isArray(data)\n          ? this.account.encodeBatchExecute(data)\n          : typeof data === \"string\"\n          ? data\n          : this.account.encodeExecute(\n              data.target,\n              data.value ?? 0n,\n              data.data\n            ),\n        signature: this.account.getDummySignature(),\n      } as Deferrable<UserOperationStruct>,\n      overrides\n    );\n  };\n\n  sendUserOperation = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ): Promise<SendUserOperationResult> => {\n    if (!this.account) {\n      throw new Error(\"account not connected\");\n    }\n\n    const uoStruct = await this.buildUserOperation(data, overrides);\n    return this._sendUserOperation(uoStruct);\n  };\n\n  dropAndReplaceUserOperation = async (\n    uoToDrop: UserOperationRequest,\n    overrides?: UserOperationOverrides\n  ): Promise<SendUserOperationResult> => {\n    const uoToSubmit = {\n      initCode: uoToDrop.initCode,\n      sender: uoToDrop.sender,\n      nonce: uoToDrop.nonce,\n      callData: uoToDrop.callData,\n      signature: uoToDrop.signature,\n    } as UserOperationStruct;\n\n    // Run once to get the fee estimates\n    // This can happen at any part of the middleware stack, so we want to run it all\n    const { maxFeePerGas, maxPriorityFeePerGas } =\n      await this._runMiddlewareStack(uoToSubmit, overrides);\n\n    const _overrides: UserOperationOverrides = {\n      maxFeePerGas: bigIntMax(\n        BigInt(maxFeePerGas ?? 0n),\n        bigIntPercent(uoToDrop.maxFeePerGas, 110n)\n      ),\n      maxPriorityFeePerGas: bigIntMax(\n        BigInt(maxPriorityFeePerGas ?? 0n),\n        bigIntPercent(uoToDrop.maxPriorityFeePerGas, 110n)\n      ),\n      paymasterAndData: uoToDrop.paymasterAndData,\n    };\n\n    const uoToSend = await this._runMiddlewareStack(uoToSubmit, _overrides);\n    return this._sendUserOperation(uoToSend);\n  };\n\n  checkGasSponsorshipEligibility = async (\n    data: UserOperationCallData | BatchUserOperationCallData,\n    overrides?: UserOperationOverrides\n  ): Promise<boolean> => {\n    return this.buildUserOperation(data, overrides)\n      .then(\n        (userOperationStruct: UserOperationStruct) =>\n          userOperationStruct.paymasterAndData !== \"0x\" &&\n          userOperationStruct.paymasterAndData !== null\n      )\n      .catch(() => false);\n  };\n\n  private _runMiddlewareStack = async (\n    uo: Deferrable<UserOperationStruct>,\n    overrides?: UserOperationOverrides\n  ) => {\n    const result = await asyncPipe(\n      this.dummyPaymasterDataMiddleware,\n      this.feeDataGetter,\n      this.gasEstimator,\n      this.customMiddleware ?? noOpMiddleware,\n      overrides?.paymasterAndData != null\n        ? this.overridePaymasterDataMiddleware\n        : this.paymasterDataMiddleware,\n      this.simulateUOMiddleware\n    )(uo, overrides, this.feeOptions);\n\n    return resolveProperties<UserOperationStruct>(result);\n  };\n\n  private _sendUserOperation = async (uoStruct: UserOperationStruct) => {\n    if (!this.account) {\n      throw new Error(\"account not connected\");\n    }\n\n    const request = deepHexlify(uoStruct);\n    if (!isValidRequest(request)) {\n      // this pretty prints the uo\n      throw new Error(\n        `Request is missing parameters. All properties on UserOperationStruct must be set. uo: ${JSON.stringify(\n          uoStruct,\n          null,\n          2\n        )}`\n      );\n    }\n\n    request.signature = (await this.account.signUserOperationHash(\n      getUserOperationHash(\n        request,\n        this.getEntryPointAddress(),\n        BigInt(this.chain.id)\n      )\n    )) as `0x${string}`;\n\n    return {\n      hash: await this.rpcClient.sendUserOperation(\n        request,\n        this.getEntryPointAddress()\n      ),\n      request,\n    };\n  };\n\n  // These are dependent on the specific paymaster being used\n  // You should implement your own middleware to override these\n  // or extend this class and provider your own implemenation\n  readonly dummyPaymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct,\n    _overrides,\n    _feeOptions\n  ) => {\n    struct.paymasterAndData = \"0x\";\n    return struct;\n  };\n\n  readonly overridePaymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct,\n    overrides,\n    _feeOptions\n  ) => {\n    struct.paymasterAndData =\n      overrides?.paymasterAndData != null ? overrides?.paymasterAndData : \"0x\";\n    return struct;\n  };\n\n  readonly paymasterDataMiddleware: AccountMiddlewareFn = async (\n    struct,\n    _overrides,\n    _feeOptions\n  ) => {\n    struct.paymasterAndData = \"0x\";\n    return struct;\n  };\n\n  readonly gasEstimator: AccountMiddlewareFn = async (\n    struct,\n    overrides,\n    feeOptions\n  ) => {\n    let { callGasLimit, verificationGasLimit, preVerificationGas } =\n      overrides ?? {};\n\n    if (\n      callGasLimit == null ||\n      verificationGasLimit == null ||\n      preVerificationGas == null\n    ) {\n      const request = deepHexlify(await resolveProperties(struct));\n      const estimates = await this.rpcClient.estimateUserOperationGas(\n        request,\n        this.getEntryPointAddress()\n      );\n\n      callGasLimit =\n        callGasLimit ??\n        applyFeeOption(estimates.callGasLimit, feeOptions?.callGasLimit);\n      verificationGasLimit =\n        verificationGasLimit ??\n        applyFeeOption(\n          estimates.verificationGasLimit,\n          feeOptions?.verificationGasLimit\n        );\n      preVerificationGas =\n        preVerificationGas ??\n        applyFeeOption(\n          estimates.preVerificationGas,\n          feeOptions?.preVerificationGas\n        );\n    }\n\n    struct.callGasLimit = callGasLimit;\n    struct.verificationGasLimit = verificationGasLimit;\n    struct.preVerificationGas = preVerificationGas;\n\n    return struct;\n  };\n\n  readonly feeDataGetter: AccountMiddlewareFn = async (\n    struct,\n    overrides,\n    feeOptions\n  ) => {\n    const estimateMaxPriorityFeePerGas = async () => {\n      const estimate = await this.rpcClient.estimateMaxPriorityFeePerGas();\n      return applyFeeOption(estimate, feeOptions?.maxPriorityFeePerGas);\n    };\n\n    // maxFeePerGas must be at least the sum of maxPriorityFeePerGas and baseFee\n    // so we need to accommodate for the fee option applied maxPriorityFeePerGas for the maxFeePerGas\n    //\n    // Note that if maxFeePerGas is not at least the sum of maxPriorityFeePerGas and required baseFee\n    // after applying the fee options, then the transaction will fail\n    //\n    // Refer to https://docs.alchemy.com/docs/maxpriorityfeepergas-vs-maxfeepergas\n    // for more information about maxFeePerGas and maxPriorityFeePerGas\n    const estimateMaxFeePerGas = async (maxPriorityFeePerGas: BigNumberish) => {\n      const feeData = await this.rpcClient.estimateFeesPerGas();\n      if (!feeData.maxFeePerGas || !feeData.maxPriorityFeePerGas) {\n        throw new Error(\n          \"feeData is missing maxFeePerGas or maxPriorityFeePerGas\"\n        );\n      }\n      const baseFee = applyFeeOption(\n        feeData.maxFeePerGas - feeData.maxPriorityFeePerGas,\n        feeOptions?.maxFeePerGas\n      );\n\n      return BigInt(baseFee) + BigInt(maxPriorityFeePerGas);\n    };\n\n    struct.maxPriorityFeePerGas =\n      overrides?.maxPriorityFeePerGas != null\n        ? overrides?.maxPriorityFeePerGas\n        : await estimateMaxPriorityFeePerGas();\n    struct.maxFeePerGas =\n      overrides?.maxFeePerGas != null\n        ? overrides?.maxFeePerGas\n        : await estimateMaxFeePerGas(struct.maxPriorityFeePerGas);\n\n    return struct;\n  };\n\n  readonly customMiddleware: AccountMiddlewareFn = noOpMiddleware;\n\n  readonly simulateUOMiddleware: AccountMiddlewareFn = noOpMiddleware;\n\n  withPaymasterMiddleware = (overrides: {\n    dummyPaymasterDataMiddleware?: PaymasterAndDataMiddleware;\n    paymasterDataMiddleware?: PaymasterAndDataMiddleware;\n  }): this => {\n    const newDummyMiddleware = overrides.dummyPaymasterDataMiddleware\n      ? this.overrideMiddlewareFunction(overrides.dummyPaymasterDataMiddleware)\n      : this.dummyPaymasterDataMiddleware;\n    defineReadOnly(this, \"dummyPaymasterDataMiddleware\", newDummyMiddleware);\n\n    const newPaymasterMiddleware = overrides.paymasterDataMiddleware\n      ? this.overrideMiddlewareFunction(overrides.paymasterDataMiddleware)\n      : this.paymasterDataMiddleware;\n    defineReadOnly(this, \"paymasterDataMiddleware\", newPaymasterMiddleware);\n\n    return this;\n  };\n\n  withGasEstimator = (override: GasEstimatorMiddleware): this => {\n    defineReadOnly(\n      this,\n      \"gasEstimator\",\n      this.overrideMiddlewareFunction(override)\n    );\n    return this;\n  };\n\n  withFeeDataGetter = (override: FeeDataMiddleware): this => {\n    defineReadOnly(\n      this,\n      \"feeDataGetter\",\n      this.overrideMiddlewareFunction(override)\n    );\n    return this;\n  };\n\n  withCustomMiddleware = (override: AccountMiddlewareFn): this => {\n    defineReadOnly(this, \"customMiddleware\", override);\n\n    return this;\n  };\n\n  withSimulateUOMiddleware = (override: AccountMiddlewareFn): this => {\n    defineReadOnly(this, \"simulateUOMiddleware\", override);\n\n    return this;\n  };\n\n  connect = <TAccount extends ISmartContractAccount>(\n    fn: (\n      provider:\n        | PublicErc4337Client<TTransport>\n        | PublicErc4337Client<HttpTransport>\n    ) => TAccount\n  ): this & { account: TAccount } => {\n    const account = fn(this.rpcClient);\n\n    // sanity check. Note that this check is only performed if and only if the optional entryPointAddress is given upon initialization.\n    if (\n      this.entryPointAddress &&\n      account.getEntryPointAddress() !== this.entryPointAddress\n    ) {\n      throw new Error(\n        `Account entryPoint address: ${account.getEntryPointAddress()} does not match the current provider's entryPoint address: ${\n          this.entryPointAddress\n        }`\n      );\n    }\n\n    defineReadOnly(this, \"account\", account);\n\n    if (this.rpcClient.transport.type === \"http\") {\n      const { url = this.chain.rpcUrls.default.http[0], fetchOptions } = this\n        .rpcClient.transport as ReturnType<HttpTransport>[\"config\"] &\n        ReturnType<HttpTransport>[\"value\"];\n\n      const signer = account.getOwner();\n      const factoryAddress = account.getFactoryAddress();\n\n      this.rpcClient = createPublicErc4337Client({\n        chain: this.chain,\n        rpcUrl: url,\n        fetchOptions: {\n          ...fetchOptions,\n          headers: {\n            ...fetchOptions?.headers,\n            \"Alchemy-Aa-Sdk-Signer\": signer?.signerType || \"unknown\",\n            \"Alchemy-Aa-Sdk-Factory-Address\": factoryAddress,\n          },\n        },\n      });\n    }\n\n    this.emit(\"connect\", {\n      chainId: toHex(this.chain.id),\n    });\n\n    account\n      .getAddress()\n      .then((address) => this.emit(\"accountsChanged\", [address]));\n\n    return this as unknown as this & { account: TAccount };\n  };\n\n  disconnect = (): this & { account: undefined } => {\n    if (this.account) {\n      this.emit(\"disconnect\");\n      this.emit(\"accountsChanged\", []);\n    }\n\n    defineReadOnly(this, \"account\", undefined);\n\n    return this as this & { account: undefined };\n  };\n\n  isConnected = <TAccount extends ISmartContractAccount>(): this is this & {\n    account: TAccount;\n  } => {\n    return this.account !== undefined;\n  };\n\n  /*\n   * Note that the connected account's entryPointAddress always takes the precedence\n   */\n  getEntryPointAddress = (): Address => {\n    return (\n      this.entryPointAddress ??\n      this.account?.getEntryPointAddress() ??\n      getDefaultEntryPointAddress(this.chain)\n    );\n  };\n\n  extend = <R>(fn: (self: this) => R): this & R => {\n    const extended = fn(this) as any;\n    // this should make it so extensions can't overwrite the base methods\n    for (const key in this) {\n      delete extended[key];\n    }\n\n    return Object.assign(this, extended);\n  };\n\n  private overrideMiddlewareFunction = (\n    override: AccountMiddlewareOverrideFn\n  ): AccountMiddlewareFn => {\n    return async (struct, overrides) => {\n      return {\n        ...struct,\n        ...(await override(struct, overrides)),\n      };\n    };\n  };\n}\n"]}