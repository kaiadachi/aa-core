{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/utils/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAc,MAAM,MAAM,CAAC;AACzC,OAAO,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC;AACxB,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAC,MAAM,CAAQ,CAAC,KAAK,EAAE,EAAE;IACnD,IACE,KAAK,IAAI,IAAI;QACb,CAAC,CAAC,OAAO,KAAK,KAAK,QAAQ,CAAC;QAC5B,CAAC,CAAC,IAAI,IAAI,KAAK,CAAC;QAChB,OAAO,KAAK,CAAC,EAAE,KAAK,QAAQ,EAC5B;QACA,OAAO,KAAK,CAAC;KACd;IAED,IAAI;QACF,OAAO,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,SAAS,CAAC;KACzC;IAAC,MAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,CAAC,MAAM,CAAuB,CAAC,GAAG,EAAE,EAAE;IAC9D,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;AACpB,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;AAE/E,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC;KACrC,MAAM,CAAC;IACN,GAAG,EAAE,kBAAkB,CAAC,QAAQ,EAAE;IAClC,GAAG,EAAE,kBAAkB,CAAC,QAAQ,EAAE;CACnC,CAAC;KACD,MAAM,EAAE,CAAC;AAEZ,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC;KAC9B,MAAM,CAAC;IAIN,UAAU,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC;CACxC,CAAC;KACD,MAAM,EAAE,CAAC","sourcesContent":["import { isHex, type Chain } from \"viem\";\nimport { z } from \"zod\";\nimport { getChain } from \"./index.js\";\n\nexport const ChainSchema = z.custom<Chain>((chain) => {\n  if (\n    chain == null ||\n    !(typeof chain === \"object\") ||\n    !(\"id\" in chain) ||\n    typeof chain.id !== \"number\"\n  ) {\n    return false;\n  }\n\n  try {\n    return getChain(chain.id) !== undefined;\n  } catch {\n    return false;\n  }\n});\n\nexport const HexSchema = z.custom<`0x${string}` | \"0x\">((val) => {\n  return isHex(val);\n});\n\nexport const BigNumberishSchema = z.union([HexSchema, z.number(), z.bigint()]);\n\nexport const BigNumberishRangeSchema = z\n  .object({\n    min: BigNumberishSchema.optional(),\n    max: BigNumberishSchema.optional(),\n  })\n  .strict();\n\nexport const PercentageSchema = z\n  .object({\n    /**\n     * Percent value between 1 and 1000 inclusive\n     */\n    percentage: z.number().min(1).max(1000),\n  })\n  .strict();\n"]}