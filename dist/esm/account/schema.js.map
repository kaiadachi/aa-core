{"version":3,"file":"schema.js","sourceRoot":"","sources":["../../../src/account/schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,KAAK,EAAkB,MAAM,MAAM,CAAC;AAC7C,OAAO,CAAC,MAAM,KAAK,CAAC;AACpB,OAAO,EAAE,+BAA+B,EAAE,MAAM,qBAAqB,CAAC;AAEtE,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AACnD,OAAO,EAAE,WAAW,EAAE,MAAM,mBAAmB,CAAC;AAEhD,MAAM,CAAC,MAAM,kCAAkC,GAAG,GAE9C,EAAE,CACJ,CAAC,CAAC,MAAM,CAAC;IACP,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC,MAAM,EAAE;QACV,+BAA+B,EAAc;KAC9C,CAAC;IACF,cAAc,EAAE,OAAO;IACvB,KAAK,EAAE,YAAY,CAAC,QAAQ,EAAE;IAC9B,iBAAiB,EAAE,OAAO,CAAC,QAAQ,EAAE;IACrC,KAAK,EAAE,WAAW;IAClB,cAAc,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACzC,4CAA4C,CAC7C;IACD,QAAQ,EAAE,CAAC;SACR,MAAM,EAAE;SACR,MAAM,CAAC,KAAK,EAAE,+BAA+B,CAAC;SAC9C,QAAQ,EAAE;SACV,QAAQ,CAAC,8CAA8C,CAAC;CAC5D,CAAC,CAAC;AAEL,MAAM,CAAC,MAAM,8BAA8B,GAAG,GAE1C,EAAE,CACJ,kCAAkC,EAAc,CAAC,MAAM,CAAC;IACtD,KAAK,EAAE,YAAY;IACnB,KAAK,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAC7B,CAAC,CAAC","sourcesContent":["import { Address } from \"abitype/zod\";\nimport { isHex, type Transport } from \"viem\";\nimport z from \"zod\";\nimport { createPublicErc4337ClientSchema } from \"../client/schema.js\";\nimport type { SupportedTransports } from \"../client/types\";\nimport { SignerSchema } from \"../signer/schema.js\";\nimport { ChainSchema } from \"../utils/index.js\";\n\nexport const createBaseSmartAccountParamsSchema = <\n  TTransport extends SupportedTransports = Transport\n>() =>\n  z.object({\n    rpcClient: z.union([\n      z.string(),\n      createPublicErc4337ClientSchema<TTransport>(),\n    ]),\n    factoryAddress: Address,\n    owner: SignerSchema.optional(),\n    entryPointAddress: Address.optional(),\n    chain: ChainSchema,\n    accountAddress: Address.optional().describe(\n      \"Optional override for the account address.\"\n    ),\n    initCode: z\n      .string()\n      .refine(isHex, \"initCode must be a valid hex.\")\n      .optional()\n      .describe(\"Optional override for the account init code.\"),\n  });\n\nexport const SimpleSmartAccountParamsSchema = <\n  TTransport extends SupportedTransports = Transport\n>() =>\n  createBaseSmartAccountParamsSchema<TTransport>().extend({\n    owner: SignerSchema,\n    index: z.bigint().optional(),\n  });\n"]}