{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/client/types.ts"],"names":[],"mappings":"","sourcesContent":["import type { Address } from \"abitype\";\nimport type {\n  Chain,\n  Client,\n  FallbackTransport,\n  Hash,\n  HttpTransport,\n  PublicActions,\n  PublicRpcSchema,\n  Transport,\n} from \"viem\";\nimport type {\n  UserOperationEstimateGasResponse,\n  UserOperationReceipt,\n  UserOperationRequest,\n  UserOperationResponse,\n} from \"../types.js\";\n\nexport type SupportedTransports = Transport | FallbackTransport | HttpTransport;\n\nexport type Erc4337RpcSchema = [\n  {\n    Method: \"eth_sendUserOperation\";\n    Parameters: [UserOperationRequest, Address];\n    ReturnType: Hash;\n  },\n  {\n    Method: \"eth_estimateUserOperationGas\";\n    Parameters: [UserOperationRequest, Address];\n    ReturnType: UserOperationEstimateGasResponse;\n  },\n  {\n    Method: \"eth_getUserOperationReceipt\";\n    Parameters: [Hash];\n    ReturnType: UserOperationReceipt | null;\n  },\n  {\n    Method: \"eth_getUserOperationByHash\";\n    Parameters: [Hash];\n    ReturnType: UserOperationResponse | null;\n  },\n  {\n    Method: \"eth_supportedEntryPoints\";\n    Parameters: [];\n    ReturnType: Address[];\n  }\n];\n\nexport type Erc4337Actions = {\n  /**\n   * calls `eth_estimateUserOperationGas` and  returns the result\n   *\n   * @param request - the {@link UserOperationRequest} to estimate gas for\n   * @param entryPoint - the entrypoint address the op will be sent to\n   * @returns the gas estimates for the given response (see: {@link UserOperationEstimateGasResponse})\n   */\n  estimateUserOperationGas(\n    request: UserOperationRequest,\n    entryPoint: Address\n  ): Promise<UserOperationEstimateGasResponse>;\n\n  /**\n   * calls `eth_sendUserOperation` and returns the hash of the sent UserOperation\n   *\n   * @param request - the {@link UserOperationRequest} to send\n   * @param entryPoint - the entrypoint address the op will be sent to\n   * @returns the hash of the sent UserOperation\n   */\n  sendUserOperation(\n    request: UserOperationRequest,\n    entryPoint: Address\n  ): Promise<Hash>;\n\n  /**\n   * calls `eth_getUserOperationByHash` and returns the {@link UserOperationResponse}\n   *\n   * @param hash - the hash of the UserOperation to fetch\n   * @returns - {@link UserOperationResponse}\n   */\n  getUserOperationByHash(hash: Hash): Promise<UserOperationResponse | null>;\n\n  /**\n   * calls `eth_getUserOperationReceipt` and returns the {@link UserOperationReceipt}\n   *\n   * @param hash - the hash of the UserOperation to get the receipt for\n   * @returns - {@link UserOperationResponse}\n   */\n  getUserOperationReceipt(hash: Hash): Promise<UserOperationReceipt | null>;\n\n  /**\n   * calls `eth_supportedEntryPoints` and returns the entrypoints the RPC\n   * supports\n   * @returns - {@link Address}[]\n   */\n  getSupportedEntryPoints(): Promise<Address[]>;\n};\n\nexport type PublicErc4337Client<T extends SupportedTransports = Transport> =\n  Client<\n    T,\n    Chain,\n    undefined,\n    [...PublicRpcSchema, ...Erc4337RpcSchema],\n    PublicActions<T, Chain> & Erc4337Actions\n  >;\n"]}