{"version":3,"file":"create-client.js","sourceRoot":"","sources":["../../../src/client/create-client.ts"],"names":[],"mappings":"AACA,OAAO,EACL,kBAAkB,EAClB,IAAI,GAYL,MAAM,MAAM,CAAC;AAOd,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAGxC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,MAAc,EAAE,EAAE;IACrD,MAAM,aAAa,GAAG,MAMrB,CAAC;IAEF,OAAO;QACL,wBAAwB,CACtB,OAA6B,EAC7B,UAAkB;YAElB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,8BAA8B;gBACtC,MAAM,EAAE,CAAC,OAAO,EAAE,UAAqB,CAAC;aACzC,CAAC,CAAC;QACL,CAAC;QAED,iBAAiB,CACf,OAA6B,EAC7B,UAAkB;YAElB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,uBAAuB;gBAC/B,MAAM,EAAE,CAAC,OAAO,EAAE,UAAqB,CAAC;aACzC,CAAC,CAAC;QACL,CAAC;QAED,sBAAsB,CAAC,IAAU;YAC/B,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,4BAA4B;gBACpC,MAAM,EAAE,CAAC,IAAI,CAAC;aACf,CAAC,CAAC;QACL,CAAC;QAED,uBAAuB,CAAC,IAAU;YAChC,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,6BAA6B;gBACrC,MAAM,EAAE,CAAC,IAAI,CAAC;aACf,CAAC,CAAC;QACL,CAAC;QAED,uBAAuB;YACrB,OAAO,aAAa,CAAC,OAAO,CAAC;gBAC3B,MAAM,EAAE,0BAA0B;gBAClC,MAAM,EAAE,EAAE;aACX,CAAC,CAAC;QACL,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAIZ,CAG5B,MAA8B,EACN,EAAE;IAC1B,OAAO,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,EACxC,KAAK,EACL,MAAM,EACN,YAAY,GAKb,EAAsC,EAAE;IACvC,MAAM,MAAM,GAAG,6BAA6B,CAC1C,kBAAkB,CAAC;QACjB,KAAK;QACL,SAAS,EAAE,IAAI,CAAC,MAAM,EAAE;YACtB,YAAY,EAAE;gBACZ,GAAG,YAAY;gBACf,OAAO,EAAE;oBACP,GAAG,YAAY,EAAE,OAAO;oBACxB,wBAAwB,EAAE,OAAO;iBAClC;aACF;SACF,CAAC;KACH,CAAC,CACH,CAAC;IAEF,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import type { Address } from \"abitype\";\nimport {\n  createPublicClient,\n  http,\n  type Chain,\n  type Client,\n  type FallbackTransport,\n  type Hash,\n  type Hex,\n  type HttpTransport,\n  type HttpTransportConfig,\n  type PublicActions,\n  type PublicClient,\n  type PublicRpcSchema,\n  type Transport,\n} from \"viem\";\nimport type {\n  UserOperationEstimateGasResponse,\n  UserOperationReceipt,\n  UserOperationRequest,\n  UserOperationResponse,\n} from \"../types.js\";\nimport { VERSION } from \"../version.js\";\nimport type { Erc4337RpcSchema, PublicErc4337Client } from \"./types.js\";\n\nexport const erc4337ClientActions = (client: Client) => {\n  const clientAdapter = client as Client<\n    Transport,\n    Chain,\n    undefined,\n    [...PublicRpcSchema, ...Erc4337RpcSchema],\n    PublicActions\n  >;\n\n  return {\n    estimateUserOperationGas(\n      request: UserOperationRequest,\n      entryPoint: string\n    ): Promise<UserOperationEstimateGasResponse> {\n      return clientAdapter.request({\n        method: \"eth_estimateUserOperationGas\",\n        params: [request, entryPoint as Address],\n      });\n    },\n\n    sendUserOperation(\n      request: UserOperationRequest,\n      entryPoint: string\n    ): Promise<Hex> {\n      return clientAdapter.request({\n        method: \"eth_sendUserOperation\",\n        params: [request, entryPoint as Address],\n      });\n    },\n\n    getUserOperationByHash(hash: Hash): Promise<UserOperationResponse | null> {\n      return clientAdapter.request({\n        method: \"eth_getUserOperationByHash\",\n        params: [hash],\n      });\n    },\n\n    getUserOperationReceipt(hash: Hash): Promise<UserOperationReceipt | null> {\n      return clientAdapter.request({\n        method: \"eth_getUserOperationReceipt\",\n        params: [hash],\n      });\n    },\n\n    getSupportedEntryPoints(): Promise<Address[]> {\n      return clientAdapter.request({\n        method: \"eth_supportedEntryPoints\",\n        params: [],\n      });\n    },\n  };\n};\n\nexport const createPublicErc4337FromClient: <\n  T extends Transport | FallbackTransport = Transport\n>(\n  client: PublicClient<T, Chain>\n) => PublicErc4337Client<T> = <\n  T extends Transport | FallbackTransport = Transport\n>(\n  client: PublicClient<T, Chain>\n): PublicErc4337Client<T> => {\n  return client.extend(erc4337ClientActions);\n};\n\nexport const createPublicErc4337Client = ({\n  chain,\n  rpcUrl,\n  fetchOptions,\n}: {\n  chain: Chain;\n  rpcUrl: string;\n  fetchOptions?: HttpTransportConfig[\"fetchOptions\"];\n}): PublicErc4337Client<HttpTransport> => {\n  const client = createPublicErc4337FromClient(\n    createPublicClient({\n      chain,\n      transport: http(rpcUrl, {\n        fetchOptions: {\n          ...fetchOptions,\n          headers: {\n            ...fetchOptions?.headers,\n            \"Alchemy-AA-Sdk-Version\": VERSION,\n          },\n        },\n      }),\n    })\n  );\n\n  return client;\n};\n"]}